#!/usr/bin/env python3
"""
Script para testar a configura√ß√£o Docker do ACODE LAB
Valida se todos os arquivos necess√°rios est√£o presentes e corretos
"""

import os
import yaml
import re
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - ARQUIVO N√ÉO ENCONTRADO!")
        return False

def validate_docker_compose():
    """Valida o arquivo docker-compose.yml"""
    print("\nüîç VALIDANDO DOCKER-COMPOSE.YML")
    print("=" * 50)
    
    if not check_file_exists("docker-compose.yml", "Docker Compose"):
        return False
    
    try:
        with open("docker-compose.yml", "r", encoding="utf-8") as f:
            content = f.read()
            compose = yaml.safe_load(content)
        
        # Verificar servi√ßos obrigat√≥rios
        required_services = ["mongodb", "backend", "frontend"]
        services_found = list(compose.get("services", {}).keys())
        
        print(f"   Servi√ßos encontrados: {services_found}")
        
        for service in required_services:
            if service in services_found:
                print(f"   ‚úÖ Servi√ßo {service} presente")
            else:
                print(f"   ‚ùå Servi√ßo {service} ausente")
                return False
        
        # Verificar vers√£o
        version = compose.get("version", "N√£o especificado")
        print(f"   Vers√£o: {version}")
        
        # Verificar networks
        networks = compose.get("networks", {})
        if "acode_lab_network" in networks:
            print("   ‚úÖ Network personalizada configurada")
        else:
            print("   ‚ö†Ô∏è Network padr√£o ser√° usada")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao validar docker-compose.yml: {e}")
        return False

def validate_dockerfiles():
    """Valida os Dockerfiles"""
    print("\nüîç VALIDANDO DOCKERFILES")
    print("=" * 50)
    
    backend_ok = check_file_exists("backend/Dockerfile", "Backend Dockerfile")
    frontend_ok = check_file_exists("frontend/Dockerfile", "Frontend Dockerfile")
    
    if backend_ok and frontend_ok:
        # Validar conte√∫do do backend Dockerfile
        try:
            with open("backend/Dockerfile", "r", encoding="utf-8") as f:
                content = f.read()
                
            checks = [
                ("FROM python:3.10-slim", "Imagem base Python"),
                ("WORKDIR /app", "Diret√≥rio de trabalho"),
                ("COPY requirements.txt", "C√≥pia de requirements"),
                ("EXPOSE 8000", "Porta exposta"),
                ("CMD", "Comando de execu√ß√£o")
            ]
            
            for check, description in checks:
                if check in content:
                    print(f"   ‚úÖ {description}")
                else:
                    print(f"   ‚ùå {description} n√£o encontrado")
                    backend_ok = False
                    
        except Exception as e:
            print(f"   ‚ùå Erro ao ler backend Dockerfile: {e}")
            backend_ok = False
    
    return backend_ok and frontend_ok

def validate_nginx_config():
    """Valida a configura√ß√£o do Nginx"""
    print("\nüîç VALIDANDO CONFIGURA√á√ÉO NGINX")
    print("=" * 50)
    
    if not check_file_exists("nginx/nginx.conf", "Configura√ß√£o Nginx"):
        return False
    
    try:
        with open("nginx/nginx.conf", "r", encoding="utf-8") as f:
            content = f.read()
        
        checks = [
            ("upstream backend", "Upstream backend"),
            ("upstream frontend", "Upstream frontend"),
            ("location /api/", "Rota API"),
            ("proxy_pass", "Proxy pass"),
            ("ssl_certificate", "SSL configurado")
        ]
        
        for check, description in checks:
            if check in content:
                print(f"   ‚úÖ {description}")
            else:
                print(f"   ‚ö†Ô∏è {description} n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao validar nginx.conf: {e}")
        return False

def validate_mongodb_init():
    """Valida o script de inicializa√ß√£o do MongoDB"""
    print("\nüîç VALIDANDO SCRIPT MONGODB")
    print("=" * 50)
    
    if not check_file_exists("backend/init-mongo.js", "Script MongoDB"):
        return False
    
    try:
        with open("backend/init-mongo.js", "r", encoding="utf-8") as e:
            content = f.read()
        
        checks = [
            ("createCollection", "Cria√ß√£o de collections"),
            ("createIndex", "Cria√ß√£o de √≠ndices"),
            ("admin@acodelab.com", "Usu√°rio admin"),
            ("Premium Badge", "Item de exemplo")
        ]
        
        for check, description in checks:
            if check in content:
                print(f"   ‚úÖ {description}")
            else:
                print(f"   ‚ùå {description} n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao validar init-mongo.js: {e}")
        return False

def validate_project_structure():
    """Valida a estrutura geral do projeto"""
    print("\nüîç VALIDANDO ESTRUTURA DO PROJETO")
    print("=" * 50)
    
    required_dirs = [
        "backend",
        "frontend", 
        "nginx"
    ]
    
    required_files = [
        "README.md",
        "docker-compose.yml"
    ]
    
    all_ok = True
    
    for directory in required_dirs:
        if os.path.isdir(directory):
            print(f"   ‚úÖ Diret√≥rio {directory}")
        else:
            print(f"   ‚ùå Diret√≥rio {directory} n√£o encontrado")
            all_ok = False
    
    for file in required_files:
        if os.path.isfile(file):
            print(f"   ‚úÖ Arquivo {file}")
        else:
            print(f"   ‚ùå Arquivo {file} n√£o encontrado")
            all_ok = False
    
    return all_ok

def validate_backend_files():
    """Valida arquivos espec√≠ficos do backend"""
    print("\nüîç VALIDANDO ARQUIVOS DO BACKEND")
    print("=" * 50)
    
    backend_files = [
        "server.py",
        "requirements.txt",
        "store_endpoints.py",
        "jobs_endpoints.py", 
        "articles_endpoints.py"
    ]
    
    all_ok = True
    for file in backend_files:
        file_path = f"backend/{file}"
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} n√£o encontrado")
            all_ok = False
    
    return all_ok

def main():
    """Executa todas as valida√ß√µes"""
    print("üöÄ VALIDA√á√ÉO DA CONFIGURA√á√ÉO DOCKER - ACODE LAB")
    print("=" * 60)
    
    results = []
    
    # Executar valida√ß√µes
    results.append(("Estrutura do Projeto", validate_project_structure()))
    results.append(("Docker Compose", validate_docker_compose()))
    results.append(("Dockerfiles", validate_dockerfiles()))
    results.append(("Configura√ß√£o Nginx", validate_nginx_config()))
    results.append(("Script MongoDB", validate_mongodb_init()))
    results.append(("Arquivos Backend", validate_backend_files()))
    
    # Resumo dos resultados
    print("\nüìä RESUMO DA VALIDA√á√ÉO")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ CONFIGURA√á√ÉO DOCKER V√ÅLIDA! Sistema pronto para deploy.")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Configure as vari√°veis de ambiente (.env)")
        print("2. Execute: docker-compose up -d --build")
        print("3. Acesse: http://localhost:3000")
    else:
        print("‚ö†Ô∏è ALGUNS PROBLEMAS FORAM IDENTIFICADOS. Corrija antes do deploy.")
    
    return passed == total

if __name__ == "__main__":
    main()
